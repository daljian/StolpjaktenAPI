{
  "swagger": "2.0",
  "info" : {
    "description" : "<h1>stolpjaktenAPI<\/h1>",
    "version" : "1.0-SNAPSHOT",
    "title" : "stolpjaktenAPI"
  },
  "schemes" : [],
  "tags" : [
    {
      "name" : "ConfigurationFacadeREST"
      ,
      "description" : "Configuration endpoint for global configuration setting."
    }
    ,
    {
      "name" : "RoleMappingsFacadeREST"
    }
    ,
    {
      "name" : "TokenFacadeREST"
    }
    ,
    {
      "name" : "UsersFacadeREST"
      ,
      "description" : "CRUD operations for Users."
    }
  ],
  "definitions" : {
    "json_BadRequest" : {
      "type" : "object",
      "title" : "BadRequest",
      "allOf" : [
        {
          "$ref" : "#/definitions/json_BaseError"
        },
        {
          "properties" : {
            "errorCode" : {
            "readOnly" : false,
"$ref" : "#/definitions/json_ErrorCode"
            }
          }
        }
      ],
      "example" : {
  "errorCode" : "JSON_SYNTAX",
  "description" : "..."
},
      "description" : "Payload for bad request (400) responses.\n<br>\nPlease see error code and description for details about the specific error."
    }
    ,
    "json_BaseError" : {
      "type" : "object",
      "title" : "BaseError",
          "properties" : {
            "description" : {
            "readOnly" : false,
"description" : "Human readable description for this error.",
"type" : "string"
            }
          },
      "example" : {
  "description" : "..."
},
      "description" : "Base class for all errors.\n<br>\nAll errors contains a description text."
    }
    ,
    "json_Configuration" : {
      "type" : "object",
      "title" : "Configuration",
          "properties" : {
            "key" : {
            "readOnly" : false,
"description" : "Configuration key.",
"type" : "string"
            },
            "value" : {
            "readOnly" : false,
"description" : "Configuration value.",
"type" : "string"
            }
          },
      "example" : {
  "key" : "...",
  "value" : "..."
},
      "description" : "Key/value container for one configuration entity.\n<br>"
    }
    ,
    "json_ErrorCode" : {
      "type" : "string",
      "title" : "ErrorCode",
          "enum" : [
            "JSON_SYNTAX",
            "JSON_SEMATIC",
            "JSON_FIELD_USERNAME",
            "JSON_FIELD_EMAIL",
            "JSON_FIELD_PASSWORD",
            "RESOURCE_EXISTS",
            "RESOURCE_NOT_EXISTS"
          ],
      "description" : "Enumeration of error codes that can occur in BadRequest responses."
    }
    ,
    "json_Forbidden" : {
      "type" : "object",
      "title" : "Forbidden",
      "allOf" : [
        {
          "$ref" : "#/definitions/json_BaseError"
        },
        {
        }
      ],
      "example" : {
  "description" : "..."
},
      "description" : "Payload for forbidden (403) responses.\n<br>\nPlease see error code and description for details about the specific error."
    }
    ,
    "json_InternalServerError" : {
      "type" : "object",
      "title" : "InternalServerError",
      "allOf" : [
        {
          "$ref" : "#/definitions/json_BaseError"
        },
        {
          "properties" : {
            "identifier" : {
            "readOnly" : false,
"description" : "A unique identifier for this specific error incident.\n<br>\nThe server log file will have more details about the error.",
"type" : "string"
            }
          }
        }
      ],
      "example" : {
  "identifier" : "...",
  "description" : "..."
},
      "description" : "Payload for internal server error (500) responses.\n<br>\nWhen an unforseen error happens, this payload will be generated.\n<br>\nShould you file a bug report for receiving this error please do so here:\n<br>\nhttps://github.com/daljian/StolpjaktenAPI/issues\n<br>\nPlease include the identifier as a minimum, and if you know how to reproduce\nthe error, please also provide the steps to reproduce the error.\n<br>\nThanks!"
    }
    ,
    "json_NotFound" : {
      "type" : "object",
      "title" : "NotFound",
      "allOf" : [
        {
          "$ref" : "#/definitions/json_BaseError"
        },
        {
        }
      ],
      "example" : {
  "description" : "..."
},
      "description" : "Payload for not found (404) responses.\n<br>\nPlease see description for details about the specific error."
    }
    ,
    "json_Token" : {
      "type" : "object",
      "title" : "Token",
          "properties" : {
            "accessToken" : {
            "readOnly" : false,
"description" : "The Bearer access token to be used for token protected endpoints.\n<br><br>\nSample value:\n<br>\n5eb19a75-c1d2-4d57-b1ec-4c61ff3c3cf2",
"type" : "string"
            },
            "type" : {
            "readOnly" : false,
"description" : "Type of access token, currently only Bearer tokens are supported.\n<br><br>\nSample value:\n<br>\nBearer",
"type" : "string"
            },
            "expire" : {
            "readOnly" : false,
"description" : "The seconds left of the token life time.\n\n<br><br>\nSample value:\n<br> 3600",
"type" : "number"
            }
          },
      "example" : {
  "accessToken" : "...",
  "type" : "...",
  "expire" : 12345
},
      "description" : "Token data container."
    }
    ,
    "json_Unauthorized" : {
      "type" : "object",
      "title" : "Unauthorized",
      "allOf" : [
        {
          "$ref" : "#/definitions/json_BaseError"
        },
        {
        }
      ],
      "example" : {
  "description" : "..."
},
      "description" : "Payload for unauthorized (403) responses.\n<br>\nPlease see description for details about the specific error."
    }
    ,
    "json_User" : {
      "type" : "object",
      "title" : "User",
          "properties" : {
            "email" : {
            "readOnly" : false,
"description" : "Email address for this user.\n<br>\nRequired: no",
"type" : "string"
            },
            "userName" : {
            "readOnly" : false,
"description" : "A globally unique username that identifies a user.\n<br>\nRequired: yes",
"type" : "string"
            },
            "password" : {
            "readOnly" : false,
"description" : "Password for this user.\n<br>\nOnly available for add (POST) and update (PUT) requests.\n<br>\nStored in database using salted one-way hash algorithm with.\n<br>\nRequired: yes",
"type" : "string"
            }
          },
      "example" : {
  "email" : "...",
  "userName" : "...",
  "password" : "..."
},
      "description" : "User container class."
    }
    ,
    "json_Users" : {
      "type" : "object",
      "title" : "Users",
          "properties" : {
            "userName" : {
            "readOnly" : false,
"description" : "A globally unique username that identifies a user.\n<br>\nRequired: yes",
"type" : "string"
            },
            "email" : {
            "readOnly" : false,
"description" : "Email address for this user.\n<br>\nRequired: no",
"type" : "string"
            },
            "password" : {
            "readOnly" : false,
"description" : "Password for this user.\n<br>\nOnly available for add (POST) and update (PUT) requests.\n<br>\nStored in database using salted one-way hash algorithm with.\n<br>\nRequired: yes",
"type" : "string"
            }
          },
      "example" : {
  "userName" : "...",
  "email" : "...",
  "password" : "..."
},
      "description" : "TODO, remove from REST JSON types.\n<br>\nTODO, document."
    }
  },
  "paths": {
    "\/configurations" : {
      "get" : {
        "tags" : [ "ConfigurationFacadeREST" ],
        "description" : "",
        "operationId" : "findAll",
        "produces" : [ "application/json" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_Configuration"
}
            },
            "example" : {
  "key" : "...",
  "value" : "..."
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/configurations/{key}" : {
      "get" : {
        "tags" : [ "ConfigurationFacadeREST" ],
        "summary" : "Get.",
        "description" : "Get",
        "operationId" : "find",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "key",
            "in" : "path",
            "required" : true,
            "type" : "string",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "string"
            },
            "description" : ""
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "ConfigurationFacadeREST" ],
        "description" : "",
        "operationId" : "update",
        "consumes" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "key",
            "in" : "path",
            "required" : true,
            "type" : "string",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"description" : "",
"type" : "string"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/users" : {
      "get" : {
        "tags" : [ "UsersFacadeREST" ],
        "description" : "",
        "operationId" : "findAll2",
        "produces" : [ "application/json" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_User"
}
            },
            "example" : {
  "email" : "...",
  "userName" : "...",
  "password" : "..."
},
            "description" : ""
          }
        }
      }
      ,
      "post" : {
        "tags" : [ "UsersFacadeREST" ],
        "summary" : "Create a new User.",
        "description" : "Create a new User.\n<br>\nAfter creating a user you should proceed to get a token using the Token\nREST service. After you have retrieved a token you can use that to access\nthe other APIs to explore arrangements, maps, courses and start register\npoles.\n<br>\n<b>Authentication:<\/b> None",
        "operationId" : "create",
        "consumes" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_Users"
            },
            "description" : "The user to create."
          }
        ],
        "responses" : {
          "201" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/users/count" : {
      "get" : {
        "tags" : [ "UsersFacadeREST" ],
        "description" : "",
        "operationId" : "countREST",
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/users/{from}/{to}" : {
      "get" : {
        "tags" : [ "UsersFacadeREST" ],
        "description" : "",
        "operationId" : "findRange",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "from",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "format" : "int32",
            "description" : ""
          },
          {
            "name" : "to",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "format" : "int32",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_User"
}
            },
            "example" : {
  "email" : "...",
  "userName" : "...",
  "password" : "..."
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/users/{userId}/roles" : {
      "get" : {
        "tags" : [ "RoleMappingsFacadeREST" ],
        "description" : "",
        "operationId" : "findAll3",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "userId",
            "in" : "path",
            "required" : true,
            "type" : "string",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "type" : "string"
}
            },
            "description" : ""
          }
        }
      }
    }
    ,
    "\/users/{userId}/roles/{role}" : {
      "get" : {
        "tags" : [ "RoleMappingsFacadeREST" ],
        "description" : "",
        "operationId" : "find2",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "role",
            "in" : "path",
            "required" : true,
            "type" : "string",
            "description" : ""
          },
          {
            "name" : "userId",
            "in" : "path",
            "required" : true,
            "type" : "string",
            "description" : ""
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "string"
            },
            "description" : ""
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "RoleMappingsFacadeREST" ],
        "description" : "",
        "operationId" : "create2",
        "parameters" : [
          {
            "name" : "userId",
            "in" : "path",
            "required" : true,
            "type" : "string",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/users/{userId}/tokens" : {
      "delete" : {
        "tags" : [ "TokenFacadeREST" ],
        "summary" : "Delete a previously created token.",
        "description" : "Delete a previously created token.",
        "operationId" : "deleteTokens",
        "parameters" : [
          {
            "name" : "userId",
            "in" : "path",
            "required" : true,
            "type" : "string",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "post" : {
        "tags" : [ "TokenFacadeREST" ],
        "summary" : "Create a token to use for subsequent requests to this API.",
        "description" : "Create a token to use for subsequent requests to this API.\n<br>\nIf you do not have a user yet, please create one using the Users REST\nfacade (POST).\n<br>\nThe retrieved token SHOULD be stored by API client implementations.\n<br>\nClient implementations <b>MUST NOT<\/b> store the user username and\npassword.\n<br>\nAn API client can retrieve as many tokens as it likes, but server might\ndiscard old tokens to manage memory resources.\n<br>\n<br>\n<b>Authentication:<\/b> Basic Authentication (RFC 7617)",
        "operationId" : "createToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "userId",
            "in" : "path",
            "required" : true,
            "type" : "string",
            "description" : ""
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_Token"
            },
            "description" : ""
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"$ref" : "#/definitions/json_Token"
            },
            "example" : {
  "accessToken" : "...",
  "type" : "...",
  "expire" : 12345
},
            "description" : ""
          }
        }
      }
    }
    ,
    "\/users/{userId}/tokens/{token-id}" : {
      "delete" : {
        "tags" : [ "TokenFacadeREST" ],
        "summary" : "Delete a previously created token.",
        "description" : "Delete a previously created token.",
        "operationId" : "deleteToken",
        "parameters" : [
          {
            "name" : "token-id",
            "in" : "path",
            "required" : true,
            "type" : "string",
            "description" : "The access token to delete, eg\n8758f65a-c27b-4f86-a43d-3ce1add36ec6\n<br>\n<b>Authentication:<\/b> Bearer Token"
          },
          {
            "name" : "userId",
            "in" : "path",
            "required" : true,
            "type" : "string",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
    ,
    "\/users/{userName}" : {
      "delete" : {
        "tags" : [ "UsersFacadeREST" ],
        "summary" : "Delete a user account.",
        "description" : "Delete a user account.\n<br>\nPlease note that this will delete the user account and all data\nassociated to it. Anonymous statistics data will remain.",
        "operationId" : "remove",
        "parameters" : [
          {
            "name" : "userName",
            "in" : "path",
            "required" : true,
            "type" : "string",
            "description" : ""
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
      ,
      "get" : {
        "tags" : [ "UsersFacadeREST" ],
        "summary" : "Retrieve a User.",
        "description" : "Retrieve a User.\n<br>",
        "operationId" : "find3",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "userName",
            "in" : "path",
            "required" : true,
            "type" : "string",
            "description" : "The user to retrieve."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/json_User"
            },
            "example" : {
  "email" : "...",
  "userName" : "...",
  "password" : "..."
},
            "description" : "OK"
          },
          "400" : {
            "schema" : {
"$ref" : "#/definitions/json_BadRequest"
            },
            "example" : {
  "email" : "...",
  "userName" : "...",
  "password" : "..."
},
            "description" : "Invalid request"
          },
          "401" : {
            "schema" : {
"$ref" : "#/definitions/json_Unauthorized"
            },
            "example" : {
  "email" : "...",
  "userName" : "...",
  "password" : "..."
},
            "description" : "Invalid request"
          },
          "403" : {
            "schema" : {
"$ref" : "#/definitions/json_Forbidden"
            },
            "example" : {
  "email" : "...",
  "userName" : "...",
  "password" : "..."
},
            "description" : "Invalid request"
          },
          "404" : {
            "schema" : {
"$ref" : "#/definitions/json_NotFound"
            },
            "example" : {
  "email" : "...",
  "userName" : "...",
  "password" : "..."
},
            "description" : "Invalid request"
          },
          "500" : {
            "schema" : {
"$ref" : "#/definitions/json_InternalServerError"
            },
            "example" : {
  "email" : "...",
  "userName" : "...",
  "password" : "..."
},
            "description" : "Invalid request"
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "UsersFacadeREST" ],
        "summary" : "Update the user.",
        "description" : "Update the user.\n<br>\n<b>Authentication:<\/b> Token (RFC 6750)",
        "operationId" : "edit",
        "consumes" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "userName",
            "in" : "path",
            "required" : true,
            "type" : "string",
            "description" : "Username User to update."
          },
          {
            "name" : "body",
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/json_User"
            },
            "description" : "New User configuration, note that you cannot change the\nuserName."
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    }
  }
}
