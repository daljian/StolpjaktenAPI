<?php

/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
 *
 */
 

namespace Se\Stolpjakten\Api\Rest;

/**
 * (no documentation provided)
 */
class User
{

    /**
     * Password for this user.
     * &lt;br&gt;
     * Only available for add (POST) and update (PUT) requests.
     * &lt;br&gt;
     * Stored in database using xxx one-way hash algorithm with key yyy and salt length ZZZ.
     * &lt;br&gt;
     * Required: yes
     *
     * @var string
     */
    private $password;

    /**
     * Email address for this user.
     * &lt;br&gt;
     * Required: no
     *
     * @var string
     */
    private $email;

    /**
     * A globally unique username that identifies a user.
     * &lt;br&gt;
     * Required: yes
     *
     * @var string
     */
    private $userName;

    /**
     * Constructs a User from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * Password for this user.
       * &lt;br&gt;
       * Only available for add (POST) and update (PUT) requests.
       * &lt;br&gt;
       * Stored in database using xxx one-way hash algorithm with key yyy and salt length ZZZ.
       * &lt;br&gt;
       * Required: yes
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Password for this user.
       * &lt;br&gt;
       * Only available for add (POST) and update (PUT) requests.
       * &lt;br&gt;
       * Stored in database using xxx one-way hash algorithm with key yyy and salt length ZZZ.
       * &lt;br&gt;
       * Required: yes
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password = $password;
    }
    /**
     * Email address for this user.
       * &lt;br&gt;
       * Required: no
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Email address for this user.
       * &lt;br&gt;
       * Required: no
     *
     * @param string $email
     */
    public function setEmail($email)
    {
        $this->email = $email;
    }
    /**
     * A globally unique username that identifies a user.
       * &lt;br&gt;
       * Required: yes
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->userName;
    }

    /**
     * A globally unique username that identifies a user.
       * &lt;br&gt;
       * Required: yes
     *
     * @param string $userName
     */
    public function setUserName($userName)
    {
        $this->userName = $userName;
    }
    /**
     * Returns the associative array for this User
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->password) {
            $a["password"] = $this->password;
        }
        if ($this->email) {
            $a["email"] = $this->email;
        }
        if ($this->userName) {
            $a["userName"] = $this->userName;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this User
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this User from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['password'])) {
            $this->password = $o["password"];
        }
        if (isset($o['email'])) {
            $this->email = $o["email"];
        }
        if (isset($o['userName'])) {
            $this->userName = $o["userName"];
        }
    }
}

namespace Se\Stolpjakten\Api\Db;

/**
 * (no documentation provided)
 */
class Humans
{

    /**
     * A globally unique username that identifies a user.
     * &lt;br&gt;
     * Required: yes
     *
     * @var string
     */
    private $userName;

    /**
     * Email address for this user.
     * &lt;br&gt;
     * Required: no
     *
     * @var string
     */
    private $email;

    /**
     * Password for this user.
     * &lt;br&gt;
     * Only available for add (POST) and update (PUT) requests.
     * &lt;br&gt;
     * Stored in database using xxx one-way hash algorithm with key yyy and salt length ZZZ.
     * &lt;br&gt;
     * Required: yes
     *
     * @var string
     */
    private $password;

    /**
     * 
     *
     * @var integer
     */
    private $salt;

    /**
     * Constructs a Humans from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * A globally unique username that identifies a user.
       * &lt;br&gt;
       * Required: yes
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->userName;
    }

    /**
     * A globally unique username that identifies a user.
       * &lt;br&gt;
       * Required: yes
     *
     * @param string $userName
     */
    public function setUserName($userName)
    {
        $this->userName = $userName;
    }
    /**
     * Email address for this user.
       * &lt;br&gt;
       * Required: no
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Email address for this user.
       * &lt;br&gt;
       * Required: no
     *
     * @param string $email
     */
    public function setEmail($email)
    {
        $this->email = $email;
    }
    /**
     * Password for this user.
       * &lt;br&gt;
       * Only available for add (POST) and update (PUT) requests.
       * &lt;br&gt;
       * Stored in database using xxx one-way hash algorithm with key yyy and salt length ZZZ.
       * &lt;br&gt;
       * Required: yes
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Password for this user.
       * &lt;br&gt;
       * Only available for add (POST) and update (PUT) requests.
       * &lt;br&gt;
       * Stored in database using xxx one-way hash algorithm with key yyy and salt length ZZZ.
       * &lt;br&gt;
       * Required: yes
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password = $password;
    }
    /**
     * 
     *
     * @return integer
     */
    public function getSalt()
    {
        return $this->salt;
    }

    /**
     * 
     *
     * @param integer $salt
     */
    public function setSalt($salt)
    {
        $this->salt = $salt;
    }
    /**
     * Returns the associative array for this Humans
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->userName) {
            $a["userName"] = $this->userName;
        }
        if ($this->email) {
            $a["email"] = $this->email;
        }
        if ($this->password) {
            $a["password"] = $this->password;
        }
        if ($this->salt) {
            $a["salt"] = $this->salt;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this Humans
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this Humans from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['userName'])) {
            $this->userName = $o["userName"];
        }
        if (isset($o['email'])) {
            $this->email = $o["email"];
        }
        if (isset($o['password'])) {
            $this->password = $o["password"];
        }
        if (isset($o['salt'])) {
            $this->salt = $o["salt"];
        }
    }
}

namespace Se\Stolpjakten\Api\Rest;

/**
 * (no documentation provided)
 */
class Token
{

    /**
     * The Bearer access token to be used for token protected endpoints.
     * &lt;br&gt;&lt;br&gt;
     * Sample value:
     * &lt;br&gt;
     * 5eb19a75-c1d2-4d57-b1ec-4c61ff3c3cf2
     *
     * @var string
     */
    private $accessToken;

    /**
     * Type of access token, currently only Bearer tokens are supported.
     * &lt;br&gt;&lt;br&gt;
     * Sample value:
     * &lt;br&gt;
     * Bearer
     *
     * @var string
     */
    private $type;

    /**
     * The seconds left of the token life time.
     * 
     * &lt;br&gt;&lt;br&gt;
     * Sample value:
     * &lt;br&gt; 3600
     *
     * @var integer
     */
    private $expire;

    /**
     * Constructs a Token from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * The Bearer access token to be used for token protected endpoints.
       * &lt;br&gt;&lt;br&gt;
       * Sample value:
       * &lt;br&gt;
       * 5eb19a75-c1d2-4d57-b1ec-4c61ff3c3cf2
     *
     * @return string
     */
    public function getAccessToken()
    {
        return $this->accessToken;
    }

    /**
     * The Bearer access token to be used for token protected endpoints.
       * &lt;br&gt;&lt;br&gt;
       * Sample value:
       * &lt;br&gt;
       * 5eb19a75-c1d2-4d57-b1ec-4c61ff3c3cf2
     *
     * @param string $accessToken
     */
    public function setAccessToken($accessToken)
    {
        $this->accessToken = $accessToken;
    }
    /**
     * Type of access token, currently only Bearer tokens are supported.
       * &lt;br&gt;&lt;br&gt;
       * Sample value:
       * &lt;br&gt;
       * Bearer
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Type of access token, currently only Bearer tokens are supported.
       * &lt;br&gt;&lt;br&gt;
       * Sample value:
       * &lt;br&gt;
       * Bearer
     *
     * @param string $type
     */
    public function setType($type)
    {
        $this->type = $type;
    }
    /**
     * The seconds left of the token life time.
       * 
       * &lt;br&gt;&lt;br&gt;
       * Sample value:
       * &lt;br&gt; 3600
     *
     * @return integer
     */
    public function getExpire()
    {
        return $this->expire;
    }

    /**
     * The seconds left of the token life time.
       * 
       * &lt;br&gt;&lt;br&gt;
       * Sample value:
       * &lt;br&gt; 3600
     *
     * @param integer $expire
     */
    public function setExpire($expire)
    {
        $this->expire = $expire;
    }
    /**
     * Returns the associative array for this Token
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->accessToken) {
            $a["accessToken"] = $this->accessToken;
        }
        if ($this->type) {
            $a["type"] = $this->type;
        }
        if ($this->expire) {
            $a["expire"] = $this->expire;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this Token
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this Token from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['accessToken'])) {
            $this->accessToken = $o["accessToken"];
        }
        if (isset($o['type'])) {
            $this->type = $o["type"];
        }
        if (isset($o['expire'])) {
            $this->expire = $o["expire"];
        }
    }
}
