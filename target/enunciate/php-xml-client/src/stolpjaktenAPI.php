<?php

/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
 *
 */
 

namespace Se\Stolpjakten\Api\Rest\Error;

/**
 * (no documentation provided)
 */
class BaseError
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $description;

    /**
     * Constructs a BaseError from an XMLReader
     *
     * @param \XMLReader $reader The reader.
     */
    public function __construct($reader = null)
    {
        $success = true;
        while ($success && $reader->nodeType != \XMLReader::ELEMENT) {
            $success = $reader->read();
        }
        if ($reader->nodeType != \XMLReader::ELEMENT) {
            throw new \Exception("Unable to read XML: no start element found.");
        }

        $this->initFromReader($reader);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * (no documentation provided)
     *
     * @param string $description
     */
    public function setDescription($description)
    {
        $this->description = $description;
    }

    /**
     * Initializes this BaseError from an XML reader.
     *
     * @param \XMLReader $xml The reader to use to initialize this object.
     */
    public function initFromReader($xml)
    {
        $empty = $xml->isEmptyElement;

        if ($xml->hasAttributes) {
            $moreAttributes = $xml->moveToFirstAttribute();
            while ($moreAttributes) {
                if (!$this->setKnownAttribute($xml)) {
                    //skip unknown attributes...
                }
                $moreAttributes = $xml->moveToNextAttribute();
            }
        }

        if (!$empty) {
            $xml->read();
            while ($xml->nodeType != \XMLReader::END_ELEMENT) {
                if ($xml->nodeType != \XMLReader::ELEMENT) {
                    //no-op: skip any insignificant whitespace, comments, etc.
                }
                else if (!$xml->isEmptyElement && !$this->setKnownChildElement($xml)) {
                    $n = $xml->localName;
                    $ns = $xml->namespaceURI;
                    //skip the unknown element
                    while ($xml->nodeType != \XMLReader::END_ELEMENT && $xml->localName != $n && $xml->namespaceURI != $ns) {
                        $xml->read();
                    }
                }
                $xml->read(); //advance the reader.
            }
        }
    }


    /**
     * Sets a known child element of BaseError from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        $happened = false;
        if (($xml->localName == 'description') && (empty($xml->namespaceURI))) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->description = $child;
            $happened = true;
        }
        return $happened;
    }

    /**
     * Sets a known attribute of BaseError from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {

        return false;
    }

    /**
     * Writes this BaseError to an XML writer.
     *
     * @param \XMLWriter $writer The XML writer.
     * @param bool $includeNamespaces Whether to write out the namespaces in the element.
     */
    public function toXml($writer, $includeNamespaces = true)
    {
        $writer->startElementNS(null, 'baseError', null);
        $this->writeXmlContents($writer);
        $writer->endElement();
    }

    /**
     * Writes the contents of this BaseError to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        if ($this->description) {
            $writer->startElementNs(null, 'description', null);
            $writer->text($this->description);
            $writer->endElement();
        }
    }
}

namespace Se\Stolpjakten\Api\Rest\Error;

/**
 * (no documentation provided)
 */
class InternalServerError extends \Se\Stolpjakten\Api\Rest\Error\BaseError
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $identifier;

    /**
     * Constructs a InternalServerError from an XMLReader
     *
     * @param \XMLReader $reader The reader.
     */
    public function __construct($reader = null)
    {
        $success = true;
        while ($success && $reader->nodeType != \XMLReader::ELEMENT) {
            $success = $reader->read();
        }
        if ($reader->nodeType != \XMLReader::ELEMENT) {
            throw new \Exception("Unable to read XML: no start element found.");
        }

        $this->initFromReader($reader);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->identifier;
    }

    /**
     * (no documentation provided)
     *
     * @param string $identifier
     */
    public function setIdentifier($identifier)
    {
        $this->identifier = $identifier;
    }

    /**
     * Sets a known child element of InternalServerError from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        $happened = parent::setKnownChildElement($xml);
        if ($happened) {
          return true;
        }
        else if (($xml->localName == 'identifier') && (empty($xml->namespaceURI))) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->identifier = $child;
            $happened = true;
        }
        return $happened;
    }

    /**
     * Sets a known attribute of InternalServerError from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
        if (parent::setKnownAttribute($xml)) {
            return true;
        }

        return false;
    }

    /**
     * Writes this InternalServerError to an XML writer.
     *
     * @param \XMLWriter $writer The XML writer.
     * @param bool $includeNamespaces Whether to write out the namespaces in the element.
     */
    public function toXml($writer, $includeNamespaces = true)
    {
        $writer->startElementNS(null, 'serverError', null);
        $this->writeXmlContents($writer);
        $writer->endElement();
    }

    /**
     * Writes the contents of this InternalServerError to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        parent::writeXmlContents($writer);
        if ($this->identifier) {
            $writer->startElementNs(null, 'identifier', null);
            $writer->text($this->identifier);
            $writer->endElement();
        }
    }
}

namespace Se\Stolpjakten\Api\Rest\Error;

/**
 * (no documentation provided)
 */
class Unauthorized extends \Se\Stolpjakten\Api\Rest\Error\BaseError
{

    /**
     * Constructs a Unauthorized from an XMLReader
     *
     * @param \XMLReader $reader The reader.
     */
    public function __construct($reader = null)
    {
        $success = true;
        while ($success && $reader->nodeType != \XMLReader::ELEMENT) {
            $success = $reader->read();
        }
        if ($reader->nodeType != \XMLReader::ELEMENT) {
            throw new \Exception("Unable to read XML: no start element found.");
        }

        $this->initFromReader($reader);
    }


    /**
     * Sets a known child element of Unauthorized from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        return false;
    }

    /**
     * Sets a known attribute of Unauthorized from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
        if (parent::setKnownAttribute($xml)) {
            return true;
        }

        return false;
    }

    /**
     * Writes this Unauthorized to an XML writer.
     *
     * @param \XMLWriter $writer The XML writer.
     * @param bool $includeNamespaces Whether to write out the namespaces in the element.
     */
    public function toXml($writer, $includeNamespaces = true)
    {
        $writer->startElementNS(null, 'unauthorized', null);
        $this->writeXmlContents($writer);
        $writer->endElement();
    }

    /**
     * Writes the contents of this Unauthorized to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        parent::writeXmlContents($writer);
    }
}

namespace Se\Stolpjakten\Api\Rest\Error;

/**
 * (no documentation provided)
 */
class NotFound extends \Se\Stolpjakten\Api\Rest\Error\BaseError
{

    /**
     * Constructs a NotFound from an XMLReader
     *
     * @param \XMLReader $reader The reader.
     */
    public function __construct($reader = null)
    {
        $success = true;
        while ($success && $reader->nodeType != \XMLReader::ELEMENT) {
            $success = $reader->read();
        }
        if ($reader->nodeType != \XMLReader::ELEMENT) {
            throw new \Exception("Unable to read XML: no start element found.");
        }

        $this->initFromReader($reader);
    }


    /**
     * Sets a known child element of NotFound from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        return false;
    }

    /**
     * Sets a known attribute of NotFound from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
        if (parent::setKnownAttribute($xml)) {
            return true;
        }

        return false;
    }

    /**
     * Writes this NotFound to an XML writer.
     *
     * @param \XMLWriter $writer The XML writer.
     * @param bool $includeNamespaces Whether to write out the namespaces in the element.
     */
    public function toXml($writer, $includeNamespaces = true)
    {
        $writer->startElementNS(null, 'notFound', null);
        $this->writeXmlContents($writer);
        $writer->endElement();
    }

    /**
     * Writes the contents of this NotFound to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        parent::writeXmlContents($writer);
    }
}

namespace Se\Stolpjakten\Api\Rest\Error;

/**
 * (no documentation provided)
 */
class Forbidden extends \Se\Stolpjakten\Api\Rest\Error\BaseError
{

    /**
     * Constructs a Forbidden from an XMLReader
     *
     * @param \XMLReader $reader The reader.
     */
    public function __construct($reader = null)
    {
        $success = true;
        while ($success && $reader->nodeType != \XMLReader::ELEMENT) {
            $success = $reader->read();
        }
        if ($reader->nodeType != \XMLReader::ELEMENT) {
            throw new \Exception("Unable to read XML: no start element found.");
        }

        $this->initFromReader($reader);
    }


    /**
     * Sets a known child element of Forbidden from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        return false;
    }

    /**
     * Sets a known attribute of Forbidden from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
        if (parent::setKnownAttribute($xml)) {
            return true;
        }

        return false;
    }

    /**
     * Writes this Forbidden to an XML writer.
     *
     * @param \XMLWriter $writer The XML writer.
     * @param bool $includeNamespaces Whether to write out the namespaces in the element.
     */
    public function toXml($writer, $includeNamespaces = true)
    {
        $writer->startElementNS(null, 'forbidden', null);
        $this->writeXmlContents($writer);
        $writer->endElement();
    }

    /**
     * Writes the contents of this Forbidden to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        parent::writeXmlContents($writer);
    }
}

namespace Se\Stolpjakten\Api\Rest\Error;

/**
 * (no documentation provided)
 */
class ErrorCode
{

    /**
     *  JSON is not syntactically  correct.
    *  &lt;br&gt;
    *  Please make sure to use JSON lib to create your payload.
     */
    const JSON_SYNTAX = "JSON_SYNTAX";

    /**
     *  JSON is not semantically correct.
    *  &lt;br&gt;
    *  Please consult API documentation to assert you follow the correct format.
     */
    const JSON_SEMATIC = "JSON_SEMATIC";

    /**
     *  JSON field &quot;userName&quot; is not correct.
    *  &lt;br&gt;
    *  Please consult Configuration setting: USERNAME_PATTERN 
     */
    const JSON_FIELD_USERNAME = "JSON_FIELD_USERNAME";

    /**
     *  JSON field &quot;email&quot; is not correct.
    *  &lt;br&gt;
    *  Email address must pass validation by javax.mail.internet.InternetAddress
     */
    const JSON_FIELD_EMAIL = "JSON_FIELD_EMAIL";

    /**
     *  JSON field &quot;password&quot; is not correct.
    *  &lt;br&gt;
    *  Please consult Configuration setting: PASSWORD_PATTERN 
     */
    const JSON_FIELD_PASSWORD = "JSON_FIELD_PASSWORD";

    /**
     *  Can not create resource, because it already exists.
    *  &lt;br&gt;
    *  POST another resource or use PUT to edit existing resource.
     */
    const RESOURCE_EXISTS = "RESOURCE_EXISTS";

    /**
     *  Requested resource was not found.
    *  &lt;br&gt;
    *  Could not find requested resource, maybe you want to POST to create it?
     */
    const RESOURCE_NOT_EXISTS = "RESOURCE_NOT_EXISTS";
}

namespace Se\Stolpjakten\Api\Rest\Error;

/**
 * (no documentation provided)
 */
class BadRequest extends \Se\Stolpjakten\Api\Rest\Error\BaseError
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $errorCode;

    /**
     * Constructs a BadRequest from an XMLReader
     *
     * @param \XMLReader $reader The reader.
     */
    public function __construct($reader = null)
    {
        $success = true;
        while ($success && $reader->nodeType != \XMLReader::ELEMENT) {
            $success = $reader->read();
        }
        if ($reader->nodeType != \XMLReader::ELEMENT) {
            throw new \Exception("Unable to read XML: no start element found.");
        }

        $this->initFromReader($reader);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getErrorCode()
    {
        return $this->errorCode;
    }

    /**
     * (no documentation provided)
     *
     * @param string $errorCode
     */
    public function setErrorCode($errorCode)
    {
        $this->errorCode = $errorCode;
    }

    /**
     * Sets a known child element of BadRequest from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        $happened = parent::setKnownChildElement($xml);
        if ($happened) {
          return true;
        }
        else if (($xml->localName == 'errorCode') && (empty($xml->namespaceURI))) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->errorCode = $child;
            $happened = true;
        }
        return $happened;
    }

    /**
     * Sets a known attribute of BadRequest from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
        if (parent::setKnownAttribute($xml)) {
            return true;
        }

        return false;
    }

    /**
     * Writes this BadRequest to an XML writer.
     *
     * @param \XMLWriter $writer The XML writer.
     * @param bool $includeNamespaces Whether to write out the namespaces in the element.
     */
    public function toXml($writer, $includeNamespaces = true)
    {
        $writer->startElementNS(null, 'badRequest', null);
        $this->writeXmlContents($writer);
        $writer->endElement();
    }

    /**
     * Writes the contents of this BadRequest to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        parent::writeXmlContents($writer);
        if ($this->errorCode) {
            $writer->startElementNs(null, 'errorCode', null);
            $writer->text($this->errorCode);
            $writer->endElement();
        }
    }
}
