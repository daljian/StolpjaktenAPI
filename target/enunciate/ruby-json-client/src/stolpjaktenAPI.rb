#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end

module EnunciateHelpers
  LAMB_CLASS_AWARE = ->(_item) do
    java_clazz = _item['@class']
    clazz_array_parts = java_clazz.split('.')
    short_clazz = clazz_array_parts.pop
    clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
    clazz = clazz_package + "::" + short_clazz
    Object.const_get(clazz).send(:from_json, _item)
  end
end


module Se

module Stolpjakten

module Api

module Rest

module Type

  # (no documentation provided)
  class User 

    # A globally unique username that identifies a user.
    # &lt;br&gt;
    # Required: yes
    attr_accessor :userName
    # Email address for this user.
    # &lt;br&gt;
    # Required: no
    attr_accessor :email
    # Password for this user.
    # &lt;br&gt;
    # Only available for add (POST) and update (PUT) requests.
    # &lt;br&gt;
    # Stored in database using xxx one-way hash algorithm with key yyy and salt length ZZZ.
    # &lt;br&gt;
    # Required: yes
    attr_accessor :password

    # the json hash for this User
    def to_jaxb_json_hash
      _h = {}
      _h['userName'] = userName.to_jaxb_json_hash unless userName.nil?
      _h['email'] = email.to_jaxb_json_hash unless email.nil?
      _h['password'] = password.to_jaxb_json_hash unless password.nil?
      return _h
    end

    # the json (string form) for this User
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this User with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['userName'].nil?
          _oa = _o['userName']
            if(_oa.is_a? Hash)
              @userName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userName.push String.from_json(_item)
                 else
                   @userName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userName = _oa
            end
          end
        if !_o['email'].nil?
          _oa = _o['email']
            if(_oa.is_a? Hash)
              @email = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @email =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @email = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @email.push String.from_json(_item)
                 else
                   @email.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @email = _oa
            end
          end
        if !_o['password'].nil?
          _oa = _o['password']
            if(_oa.is_a? Hash)
              @password = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @password =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @password = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @password.push String.from_json(_item)
                 else
                   @password.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @password = _oa
            end
          end
    end

    # constructs a User from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Se

module Stolpjakten

module Api

module Rest

module Type

  # (no documentation provided)
  class Token 

    # The Bearer access token to be used for token protected endpoints.
    # &lt;br&gt;&lt;br&gt;
    # Sample value:
    # &lt;br&gt;
    # 5eb19a75-c1d2-4d57-b1ec-4c61ff3c3cf2
    attr_accessor :accessToken
    # Type of access token, currently only Bearer tokens are supported.
    # &lt;br&gt;&lt;br&gt;
    # Sample value:
    # &lt;br&gt;
    # Bearer
    attr_accessor :type
    # The seconds left of the token life time.
    # 
    # &lt;br&gt;&lt;br&gt;
    # Sample value:
    # &lt;br&gt; 3600
    attr_accessor :expire

    # the json hash for this Token
    def to_jaxb_json_hash
      _h = {}
      _h['accessToken'] = accessToken.to_jaxb_json_hash unless accessToken.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['expire'] = expire.to_jaxb_json_hash unless expire.nil?
      return _h
    end

    # the json (string form) for this Token
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Token with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['accessToken'].nil?
          _oa = _o['accessToken']
            if(_oa.is_a? Hash)
              @accessToken = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accessToken =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accessToken = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accessToken.push String.from_json(_item)
                 else
                   @accessToken.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accessToken = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['expire'].nil?
          _oa = _o['expire']
            if(_oa.is_a? Hash)
              @expire = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @expire =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @expire = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @expire.push Bignum.from_json(_item)
                 else
                   @expire.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @expire = _oa
            end
          end
    end

    # constructs a Token from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Se

module Stolpjakten

module Api

module Db

module Type

  # (no documentation provided)
  class Users 

    # (no documentation provided)
    attr_accessor :userName
    # (no documentation provided)
    attr_accessor :email
    # (no documentation provided)
    attr_accessor :password
    # (no documentation provided)
    attr_accessor :salt

    # the json hash for this Users
    def to_jaxb_json_hash
      _h = {}
      _h['userName'] = userName.to_jaxb_json_hash unless userName.nil?
      _h['email'] = email.to_jaxb_json_hash unless email.nil?
      _h['password'] = password.to_jaxb_json_hash unless password.nil?
      _h['salt'] = salt.to_jaxb_json_hash unless salt.nil?
      return _h
    end

    # the json (string form) for this Users
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Users with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['userName'].nil?
          _oa = _o['userName']
            if(_oa.is_a? Hash)
              @userName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userName.push String.from_json(_item)
                 else
                   @userName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userName = _oa
            end
          end
        if !_o['email'].nil?
          _oa = _o['email']
            if(_oa.is_a? Hash)
              @email = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @email =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @email = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @email.push String.from_json(_item)
                 else
                   @email.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @email = _oa
            end
          end
        if !_o['password'].nil?
          _oa = _o['password']
            if(_oa.is_a? Hash)
              @password = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @password =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @password = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @password.push String.from_json(_item)
                 else
                   @password.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @password = _oa
            end
          end
        if !_o['salt'].nil?
          _oa = _o['salt']
            if(_oa.is_a? Hash)
              @salt = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @salt =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @salt = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @salt.push Fixnum.from_json(_item)
                 else
                   @salt.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @salt = _oa
            end
          end
    end

    # constructs a Users from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end
