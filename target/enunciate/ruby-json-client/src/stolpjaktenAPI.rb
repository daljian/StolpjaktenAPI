#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end

module EnunciateHelpers
  LAMB_CLASS_AWARE = ->(_item) do
    java_clazz = _item['@class']
    clazz_array_parts = java_clazz.split('.')
    short_clazz = clazz_array_parts.pop
    clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
    clazz = clazz_package + "::" + short_clazz
    Object.const_get(clazz).send(:from_json, _item)
  end
end


module Se

module Stolpjakten

module Api

module Rest

module Type

  # (no documentation provided)
  class Configuration 

    # Configuration key.
    attr_accessor :key
    # Configuration value.
    attr_accessor :value

    # the json hash for this Configuration
    def to_jaxb_json_hash
      _h = {}
      _h['key'] = key.to_jaxb_json_hash unless key.nil?
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      return _h
    end

    # the json (string form) for this Configuration
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Configuration with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['key'].nil?
          _oa = _o['key']
            if(_oa.is_a? Hash)
              @key = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @key =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @key = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @key.push String.from_json(_item)
                 else
                   @key.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @key = _oa
            end
          end
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push String.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
    end

    # constructs a Configuration from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Se

module Stolpjakten

module Api

module Rest

module Type

  # (no documentation provided)
  class Token 

    # The Bearer access token to be used for token protected endpoints.
    # &lt;br&gt;
    # &lt;b&gt;Note!&lt;/b&gt; This property exists only in responses, ignored if present in requests.
    # &lt;br&gt;
    # &lt;br&gt;
    # Required: no
    attr_accessor :accessToken
    # Type of access token, currently only Bearer tokens are supported.
    # &lt;br&gt;&lt;br&gt;
    attr_accessor :type
    # The seconds left of the token life time.
    # &lt;br&gt;
    # Expired tokens are automatically rinsed.
    # 
    # &lt;br&gt;&lt;br&gt;
    attr_accessor :expire

    # the json hash for this Token
    def to_jaxb_json_hash
      _h = {}
      _h['accessToken'] = accessToken.to_jaxb_json_hash unless accessToken.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['expire'] = expire.to_jaxb_json_hash unless expire.nil?
      return _h
    end

    # the json (string form) for this Token
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Token with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['accessToken'].nil?
          _oa = _o['accessToken']
            if(_oa.is_a? Hash)
              @accessToken = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accessToken =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accessToken = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accessToken.push String.from_json(_item)
                 else
                   @accessToken.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accessToken = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['expire'].nil?
          _oa = _o['expire']
            if(_oa.is_a? Hash)
              @expire = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @expire =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @expire = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @expire.push Bignum.from_json(_item)
                 else
                   @expire.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @expire = _oa
            end
          end
    end

    # constructs a Token from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Se

module Stolpjakten

module Api

module Rest

module Type

  # (no documentation provided)
  class User 

    # A globally unique username that identifies a user.
    # &lt;br&gt;
    # Required: yes
    attr_accessor :userName
    # Email address for this user.
    # &lt;br&gt;
    # Required: no
    attr_accessor :email
    # Password for this user.
    # &lt;br&gt;
    # Only available for add (POST) and update (PUT) requests.
    # &lt;br&gt;
    # Stored in database using salted one-way hash algorithm with.
    # &lt;br&gt;
    # Required: yes
    attr_accessor :password

    # the json hash for this User
    def to_jaxb_json_hash
      _h = {}
      _h['userName'] = userName.to_jaxb_json_hash unless userName.nil?
      _h['email'] = email.to_jaxb_json_hash unless email.nil?
      _h['password'] = password.to_jaxb_json_hash unless password.nil?
      return _h
    end

    # the json (string form) for this User
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this User with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['userName'].nil?
          _oa = _o['userName']
            if(_oa.is_a? Hash)
              @userName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userName.push String.from_json(_item)
                 else
                   @userName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userName = _oa
            end
          end
        if !_o['email'].nil?
          _oa = _o['email']
            if(_oa.is_a? Hash)
              @email = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @email =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @email = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @email.push String.from_json(_item)
                 else
                   @email.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @email = _oa
            end
          end
        if !_o['password'].nil?
          _oa = _o['password']
            if(_oa.is_a? Hash)
              @password = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @password =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @password = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @password.push String.from_json(_item)
                 else
                   @password.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @password = _oa
            end
          end
    end

    # constructs a User from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Se

module Stolpjakten

module Api

module Rest

module Error

  # (no documentation provided)
  class BaseError 

    # Human readable description for this error.
    attr_accessor :description

    # the json hash for this BaseError
    def to_jaxb_json_hash
      _h = {}
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      return _h
    end

    # the json (string form) for this BaseError
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this BaseError with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
    end

    # constructs a BaseError from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Se

module Stolpjakten

module Api

module Db

module Type

  # (no documentation provided)
  class Users 

    # A globally unique username that identifies a user.
    # &lt;br&gt;
    # Required: yes
    attr_accessor :userName
    # Email address for this user.
    # &lt;br&gt;
    # Required: no
    attr_accessor :email
    # Password for this user.
    # &lt;br&gt;
    # Only available for add (POST) and update (PUT) requests.
    # &lt;br&gt;
    # Stored in database using salted one-way hash algorithm with.
    # &lt;br&gt;
    # Required: yes
    attr_accessor :password

    # the json hash for this Users
    def to_jaxb_json_hash
      _h = {}
      _h['userName'] = userName.to_jaxb_json_hash unless userName.nil?
      _h['email'] = email.to_jaxb_json_hash unless email.nil?
      _h['password'] = password.to_jaxb_json_hash unless password.nil?
      return _h
    end

    # the json (string form) for this Users
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Users with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['userName'].nil?
          _oa = _o['userName']
            if(_oa.is_a? Hash)
              @userName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userName.push String.from_json(_item)
                 else
                   @userName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userName = _oa
            end
          end
        if !_o['email'].nil?
          _oa = _o['email']
            if(_oa.is_a? Hash)
              @email = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @email =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @email = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @email.push String.from_json(_item)
                 else
                   @email.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @email = _oa
            end
          end
        if !_o['password'].nil?
          _oa = _o['password']
            if(_oa.is_a? Hash)
              @password = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @password =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @password = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @password.push String.from_json(_item)
                 else
                   @password.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @password = _oa
            end
          end
    end

    # constructs a Users from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Se

module Stolpjakten

module Api

module Rest

module Error

  # (no documentation provided)
  class ErrorCode

    #  JSON is not syntactically  correct.
    #  &lt;br&gt;
    #  Please make sure to use JSON lib to create your payload.
    JSON_SYNTAX = "JSON_SYNTAX"

    #  JSON is not semantically correct.
    #  &lt;br&gt;
    #  Please consult API documentation to assert you follow the correct format.
    JSON_SEMATIC = "JSON_SEMATIC"

    #  JSON field &quot;userName&quot; is not correct.
    #  &lt;br&gt;
    #  Please consult Configuration setting: USERNAME_PATTERN 
    JSON_FIELD_USERNAME = "JSON_FIELD_USERNAME"

    #  JSON field &quot;email&quot; is not correct.
    #  &lt;br&gt;
    #  Email address must pass validation by javax.mail.internet.InternetAddress
    JSON_FIELD_EMAIL = "JSON_FIELD_EMAIL"

    #  JSON field &quot;password&quot; is not correct.
    #  &lt;br&gt;
    #  Please consult Configuration setting: PASSWORD_PATTERN 
    JSON_FIELD_PASSWORD = "JSON_FIELD_PASSWORD"

    #  Can not create resource, because it already exists.
    #  &lt;br&gt;
    #  POST another resource or use PUT to edit existing resource.
    RESOURCE_EXISTS = "RESOURCE_EXISTS"

    #  Requested resource was not found.
    #  &lt;br&gt;
    #  Could not find requested resource, maybe you want to POST to create it?
    RESOURCE_NOT_EXISTS = "RESOURCE_NOT_EXISTS"
  end

end

end

end

end

end

module Se

module Stolpjakten

module Api

module Rest

module Error

  # (no documentation provided)
  class InternalServerError < Se::Stolpjakten::Api::Rest::Error::BaseError 

    # 
    attr_accessor :identifier

    # the json hash for this InternalServerError
    def to_jaxb_json_hash
      _h = super
      _h['identifier'] = identifier.to_jaxb_json_hash unless identifier.nil?
      return _h
    end

    #initializes this InternalServerError with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['identifier'].nil?
          _oa = _o['identifier']
            if(_oa.is_a? Hash)
              @identifier = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @identifier =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @identifier = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @identifier.push String.from_json(_item)
                 else
                   @identifier.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @identifier = _oa
            end
          end
    end

    # constructs a InternalServerError from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Se

module Stolpjakten

module Api

module Rest

module Error

  # (no documentation provided)
  class NotFound < Se::Stolpjakten::Api::Rest::Error::BaseError 


    # the json hash for this NotFound
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this NotFound with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a NotFound from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Se

module Stolpjakten

module Api

module Rest

module Error

  # (no documentation provided)
  class Unauthorized < Se::Stolpjakten::Api::Rest::Error::BaseError 


    # the json hash for this Unauthorized
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this Unauthorized with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a Unauthorized from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Se

module Stolpjakten

module Api

module Rest

module Error

  # (no documentation provided)
  class BadRequest < Se::Stolpjakten::Api::Rest::Error::BaseError 

    # The Error code.
    attr_accessor :errorCode

    # the json hash for this BadRequest
    def to_jaxb_json_hash
      _h = super
      _h['errorCode'] = errorCode.to_jaxb_json_hash unless errorCode.nil?
      return _h
    end

    #initializes this BadRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['errorCode'].nil?
          _oa = _o['errorCode']
            if(_oa.is_a? Hash)
              @errorCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @errorCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @errorCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @errorCode.push String.from_json(_item)
                 else
                   @errorCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @errorCode = _oa
            end
          end
    end

    # constructs a BadRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Se

module Stolpjakten

module Api

module Rest

module Error

  # (no documentation provided)
  class Forbidden < Se::Stolpjakten::Api::Rest::Error::BaseError 


    # the json hash for this Forbidden
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this Forbidden with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a Forbidden from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end
